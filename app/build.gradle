apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'kotlin-kapt'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
if(rootProject.file("keystore.properties").exists()){
    // Load your keystore.properties file into the keystoreProperties object.
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.studio.timeclock4"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "0.4.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    applicationVariants.all { variant ->
        variant.resValue "string", "versionName", variant.versionName
        variant.resValue "string", "applicationId", variant.applicationId
    }

    signingConfigs{
        if(rootProject.file("keystore.properties").exists()) {
            println "'keystore.properties' file found"
            release {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyPassword keystoreProperties['keyPassword']
                keyAlias = keystoreProperties['keyAlias']
            }
        } else {println "!! 'keystore.properties' file was not found"}
    }

    buildTypes {
        release {
            resValue "string", "app_name", "VTime"
            resValue "string", "type", '"RELEASE"'
            minifyEnabled true      //Shrinks App Size
            shrinkResources true    //Deletes unused Resources
            buildConfigField "String", "TYPE", '"RELEASE"'
            buildConfigField "String", "IMA", '"I AM A BAMBOO"'
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if(rootProject.file("keystore.properties").exists()) {
                signingConfig signingConfigs.release
            }
        }

        debug {
            applicationIdSuffix = ".debug"
            versionNameSuffix "-debug"
            resValue "string", "app_name", "TimeClock4_dev"
            resValue "string", "type", '"DEBUG"'
            useProguard false
            buildConfigField "String", "TYPE", '"DEBUG"'
            buildConfigField "String", "IMA", '"I AM A SAMURAI"'
            debuggable true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def appName
            if (project.hasProperty("applicationName")) {
                appName = applicationName
            } else {
                appName = parent.name
            }
            def SEP = "_"
            def version = "v" + variant.versionName
            def buildType = variant.variantData.variantConfiguration.buildType.name
            def date = new Date()
            def formattedDate = date.format('dd.MM')

            def newApkName = "${appName}" + SEP + version + "-" + buildType + ".apk"

            outputFileName = new File(newApkName)
        }
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
            res.srcDirs = ['src/main/res',
                           'src/debug/res/layout'
            ]
        }
    }
}

dependencies {
    def nav_version = "2.2.1"
    def roomVersion = '2.2.5'
    def archLifecycleVersion = '2.2.0'
    def kotlin_version = '1.3.31'
    def coroutines = '1.2.0'
    def leakcanary = "2.2"

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    //Navigation Components
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    //Room Components
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-extensions:$archLifecycleVersion"
    // kapt "androidx.lifecycle:lifecycle-compiler:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$archLifecycleVersion"
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"

    // ViewModel Kotlin support
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"

    // LiveData Kotlin support
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"

    //ViewPager 2
    implementation "androidx.viewpager2:viewpager2:1.0.0"

    //LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary"

    //ThreeTen ABP -> Backport of the java.time package, which would depend on minSDK 26
    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.2'

    //The usual Toast, but with steroids
    implementation 'com.github.GrenderG:Toasty:1.4.2'

    //A small Android library to manage one-off operations for API 14 and higher.
    implementation 'com.jonathanfinerty.once:once:1.3.0'

    //Takt is Android library for measuring the FPS using Choreographer.
    implementation 'jp.wasabeef:takt:2.0.1'

    //This is a logger with a small, extensible API which provides utility on top of Android's normal Log class.
    implementation 'com.jakewharton.timber:timber:4.7.1'

    //Simple, pretty and powerful logger for android
    implementation 'com.orhanobut:logger:2.2.0'

    //Lottie is a library for Android, iOS, Web, and Windows that parses Adobe After Effects animations
    // exported as json with Bodymovin and renders them natively on mobile and on the web!
    implementation "com.airbnb.android:lottie:3.4.0"

    //Android Debug Database allows you to view databases and shared preferences directly in your browser
    debugImplementation 'com.amitshekhar.android:debug-db:1.0.6'

    //Another Material Time Picker for developer who do not like default Material Time Picker that difficult to use for most users
    implementation 'com.akexorcist:snap-time-picker:1.0.0'

    //A highly flexible set of lovely looking views that provides functionality of preferences.
    implementation 'com.yarolegovich:mp:1.0.9'

    //Android Library that checks for updates on Google Play, GitHub, Amazon, F-Droid or your own server.
    implementation 'com.github.javiersantos:AppUpdater:2.7'

    // ColorPickerDialog is a simple dialog making it quick and easy to add a color picker functionality to any app.
    implementation 'me.jfenn.ColorPickerDialog:base:0.2.1'

    //An Android custom rounded Progress Bar
    implementation 'com.sasank.roundedhorizontalprogress:roundedhorizontalprogress:1.0.1'
}

